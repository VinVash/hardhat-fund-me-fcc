{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd307b0f2839fa1b868d01de16e7d2d9ab953abf0086f0106680ccc241423a4e4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1022138",
    "logsBloom": "0x
    "blockHash": "0xb2eb3a16b20469d65264ad61d42b61f51b724f948e7e3f9c0e2c7f45fc48e6d9",
    "transactionHash": "0xd307b0f2839fa1b868d01de16e7d2d9ab953abf0086f0106680ccc241423a4e4",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1022138",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "7d9a01deb432f44c120573267416a004",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Vinamra Vashishth\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding project\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// error codes like this are much cheaper than the string we store in the require statement.\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries, Contracts.\\n\\n/** @title A contract for crowd funding\\n *  @author Vinamra Vashishth\\n *  @notice This contract is to demo a sample funding project\\n *  @dev This implements price feeds as our library\\n*/\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256; // using it as a library on top of uint256 type.\\n\\n    // State Variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner {\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n    \\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    /**\\n     * @notice This function funds this contract\\n     * @dev This implements price feeds as our library\\n    */\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    function withdraw() payable onlyOwner public {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        // call vs delegatecall\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        // memory is a lot cheaper than storage.\\n        // mappings can't be in memory!\\n        address[] memory funders = s_funders;\\n\\n        for(uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        s_funders = new address[](0);\\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function getOwner() public view returns(address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder) public view returns(uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n}\",\"keccak256\":\"0x14434386874cc1b587db34fff655a8df511f3ebc4d6c74afd3d72be3782fc58e\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        \\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        \\n        return uint256(answer * 10000000000);\\n    }\\n\\n    \\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        \\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0xc32f8a4662e6e77dcf31984bd1f5b57b52de991941a29c5bb7a9637a029a4268\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200129d3803806200129d833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61111e6200017f600039600081816101e30152818161043201526105bc015261111e6000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461011d578063b60d428814610148578063be2693f014610152578063d7b4750c1461015c5761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100c7578063893d20e8146100f2575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a56565b610199565b6040516100b49190610a9c565b60405180910390f35b6100c56101e1565b005b3480156100d357600080fd5b506100dc610421565b6040516100e99190610a9c565b60405180910390f35b3480156100fe57600080fd5b5061010761042e565b6040516101149190610ac6565b60405180910390f35b34801561012957600080fd5b50610132610456565b60405161013f9190610b40565b60405180910390f35b610150610480565b005b61015a6105ba565b005b34801561016857600080fd5b50610183600480360381019061017e9190610b87565b610828565b6040516101909190610ac6565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610266576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103115760006001828154811061028c5761028b610bb4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061030990610c12565b915050610269565b50600067ffffffffffffffff81111561032d5761032c610c5b565b5b60405190808252806020026020018201604052801561035b5781602001602082028036833780820191505090505b506001908051906020019061037192919061094c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161039890610cbb565b60006040518083038185875af1925050503d80600081146103d5576040519150601f19603f3d011682016040523d82523d6000602084013e6103da565b606091505b505090508061041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041590610d2d565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104bf600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461087090919063ffffffff16565b1015610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790610d99565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461054e9190610db9565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610679575b5050505050905060005b815181101561074d5760008282815181106106eb576106ea610bb4565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074590610c12565b9150506106cd565b50600067ffffffffffffffff81111561076957610768610c5b565b5b6040519080825280602002602001820160405280156107975781602001602082028036833780820191505090505b50600190805190602001906107ad92919061094c565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107d490610cbb565b60006040518083038185875af1925050503d8060008114610811576040519150601f19603f3d011682016040523d82523d6000602084013e610816565b606091505b505090508061082457600080fd5b5050565b60006001828154811061083e5761083d610bb4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061087c836108ac565b90506000670de0b6b3a764000085836108959190610e0f565b61089f9190610e98565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108f557600080fd5b505afa158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092d9190610f56565b5050509150506402540be400816109449190610fd1565b915050919050565b8280548282559060005260206000209081019282156109c5579160200282015b828111156109c45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061096c565b5b5090506109d291906109d6565b5090565b5b808211156109ef5760008160009055506001016109d7565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a23826109f8565b9050919050565b610a3381610a18565b8114610a3e57600080fd5b50565b600081359050610a5081610a2a565b92915050565b600060208284031215610a6c57610a6b6109f3565b5b6000610a7a84828501610a41565b91505092915050565b6000819050919050565b610a9681610a83565b82525050565b6000602082019050610ab16000830184610a8d565b92915050565b610ac081610a18565b82525050565b6000602082019050610adb6000830184610ab7565b92915050565b6000819050919050565b6000610b06610b01610afc846109f8565b610ae1565b6109f8565b9050919050565b6000610b1882610aeb565b9050919050565b6000610b2a82610b0d565b9050919050565b610b3a81610b1f565b82525050565b6000602082019050610b556000830184610b31565b92915050565b610b6481610a83565b8114610b6f57600080fd5b50565b600081359050610b8181610b5b565b92915050565b600060208284031215610b9d57610b9c6109f3565b5b6000610bab84828501610b72565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c1d82610a83565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c5057610c4f610be3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ca5600083610c8a565b9150610cb082610c95565b600082019050919050565b6000610cc682610c98565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d17600b83610cd0565b9150610d2282610ce1565b602082019050919050565b60006020820190508181036000830152610d4681610d0a565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d83601b83610cd0565b9150610d8e82610d4d565b602082019050919050565b60006020820190508181036000830152610db281610d76565b9050919050565b6000610dc482610a83565b9150610dcf83610a83565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e0457610e03610be3565b5b828201905092915050565b6000610e1a82610a83565b9150610e2583610a83565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5e57610e5d610be3565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ea382610a83565b9150610eae83610a83565b925082610ebe57610ebd610e69565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ee881610ec9565b8114610ef357600080fd5b50565b600081519050610f0581610edf565b92915050565b6000819050919050565b610f1e81610f0b565b8114610f2957600080fd5b50565b600081519050610f3b81610f15565b92915050565b600081519050610f5081610b5b565b92915050565b600080600080600060a08688031215610f7257610f716109f3565b5b6000610f8088828901610ef6565b9550506020610f9188828901610f2c565b9450506040610fa288828901610f41565b9350506060610fb388828901610f41565b9250506080610fc488828901610ef6565b9150509295509295909350565b6000610fdc82610f0b565b9150610fe783610f0b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102657611025610be3565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106357611062610be3565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110a05761109f610be3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110dd576110dc610be3565b5b82820290509291505056fea2646970667358221220fe98647154b35e23769b53bc0745bdf9cb4f0728fd404d008af018a84ab853ef64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461011d578063b60d428814610148578063be2693f014610152578063d7b4750c1461015c5761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100c7578063893d20e8146100f2575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a56565b610199565b6040516100b49190610a9c565b60405180910390f35b6100c56101e1565b005b3480156100d357600080fd5b506100dc610421565b6040516100e99190610a9c565b60405180910390f35b3480156100fe57600080fd5b5061010761042e565b6040516101149190610ac6565b60405180910390f35b34801561012957600080fd5b50610132610456565b60405161013f9190610b40565b60405180910390f35b610150610480565b005b61015a6105ba565b005b34801561016857600080fd5b50610183600480360381019061017e9190610b87565b610828565b6040516101909190610ac6565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610266576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156103115760006001828154811061028c5761028b610bb4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061030990610c12565b915050610269565b50600067ffffffffffffffff81111561032d5761032c610c5b565b5b60405190808252806020026020018201604052801561035b5781602001602082028036833780820191505090505b506001908051906020019061037192919061094c565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161039890610cbb565b60006040518083038185875af1925050503d80600081146103d5576040519150601f19603f3d011682016040523d82523d6000602084013e6103da565b606091505b505090508061041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041590610d2d565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104bf600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461087090919063ffffffff16565b1015610500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f790610d99565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461054e9190610db9565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106c357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610679575b5050505050905060005b815181101561074d5760008282815181106106eb576106ea610bb4565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061074590610c12565b9150506106cd565b50600067ffffffffffffffff81111561076957610768610c5b565b5b6040519080825280602002602001820160405280156107975781602001602082028036833780820191505090505b50600190805190602001906107ad92919061094c565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107d490610cbb565b60006040518083038185875af1925050503d8060008114610811576040519150601f19603f3d011682016040523d82523d6000602084013e610816565b606091505b505090508061082457600080fd5b5050565b60006001828154811061083e5761083d610bb4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061087c836108ac565b90506000670de0b6b3a764000085836108959190610e0f565b61089f9190610e98565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156108f557600080fd5b505afa158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092d9190610f56565b5050509150506402540be400816109449190610fd1565b915050919050565b8280548282559060005260206000209081019282156109c5579160200282015b828111156109c45782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061096c565b5b5090506109d291906109d6565b5090565b5b808211156109ef5760008160009055506001016109d7565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a23826109f8565b9050919050565b610a3381610a18565b8114610a3e57600080fd5b50565b600081359050610a5081610a2a565b92915050565b600060208284031215610a6c57610a6b6109f3565b5b6000610a7a84828501610a41565b91505092915050565b6000819050919050565b610a9681610a83565b82525050565b6000602082019050610ab16000830184610a8d565b92915050565b610ac081610a18565b82525050565b6000602082019050610adb6000830184610ab7565b92915050565b6000819050919050565b6000610b06610b01610afc846109f8565b610ae1565b6109f8565b9050919050565b6000610b1882610aeb565b9050919050565b6000610b2a82610b0d565b9050919050565b610b3a81610b1f565b82525050565b6000602082019050610b556000830184610b31565b92915050565b610b6481610a83565b8114610b6f57600080fd5b50565b600081359050610b8181610b5b565b92915050565b600060208284031215610b9d57610b9c6109f3565b5b6000610bab84828501610b72565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c1d82610a83565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c5057610c4f610be3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ca5600083610c8a565b9150610cb082610c95565b600082019050919050565b6000610cc682610c98565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d17600b83610cd0565b9150610d2282610ce1565b602082019050919050565b60006020820190508181036000830152610d4681610d0a565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d83601b83610cd0565b9150610d8e82610d4d565b602082019050919050565b60006020820190508181036000830152610db281610d76565b9050919050565b6000610dc482610a83565b9150610dcf83610a83565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e0457610e03610be3565b5b828201905092915050565b6000610e1a82610a83565b9150610e2583610a83565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e5e57610e5d610be3565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ea382610a83565b9150610eae83610a83565b925082610ebe57610ebd610e69565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ee881610ec9565b8114610ef357600080fd5b50565b600081519050610f0581610edf565b92915050565b6000819050919050565b610f1e81610f0b565b8114610f2957600080fd5b50565b600081519050610f3b81610f15565b92915050565b600081519050610f5081610b5b565b92915050565b600080600080600060a08688031215610f7257610f716109f3565b5b6000610f8088828901610ef6565b9550506020610f9188828901610f2c565b9450506040610fa288828901610f41565b9350506060610fb388828901610f41565b9250506080610fc488828901610ef6565b9150509295509295909350565b6000610fdc82610f0b565b9150610fe783610f0b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561102657611025610be3565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561106357611062610be3565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110a05761109f610be3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110dd576110dc610be3565b5b82820290509291505056fea2646970667358221220fe98647154b35e23769b53bc0745bdf9cb4f0728fd404d008af018a84ab853ef64736f6c63430008080033",
  "devdoc": {
    "author": "Vinamra Vashishth",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding project",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}